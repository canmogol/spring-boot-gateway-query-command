{
	"info": {
		"_postman_id": "88436d79-1217-4ea5-b54b-bdd597f6742b",
		"name": "Gateway",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2830370"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "/users - NO JWT - Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('instance');",
									"    pm.expect(responseData).to.have.property('user');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('detail');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.be.a('Number').and.eq(401);",
									"});",
									"",
									"",
									"pm.test(\"User is anonymous\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.user).to.be.a('string').and.eq(\"anonymous\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users - USER JWT - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Username, name, and roles are present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user).to.have.property('username').that.is.a('string');",
									"    pm.expect(user).to.have.property('name').that.is.a('string');",
									"    pm.expect(user).to.have.property('roles').that.is.an('array');",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users - USER JWT - Fail Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - title, instance, user, status, and detail\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('instance');",
									"    pm.expect(responseData).to.have.property('user');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('detail');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"User is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.user).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.be.a('Number').and.eq(403);",
									"});",
									"",
									"",
									"pm.test(\"User is mike\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.user).to.be.a('string').and.eq(\"mike\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user9\",\n    \"username\": \"user9\",\n    \"roles\": [\n        \"user\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users - ADMIN JWT - Fail, validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('detail');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('instance');",
									"    pm.expect(responseData).to.have.property('user');",
									"});",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"pm.test(\"User is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.user).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.be.a('Number').and.eq(400);",
									"});",
									"",
									"pm.test(\"User is john\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.user).to.be.a('string').and.eq(\"john\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user9\",\n    \"username\": \"user9\",\n    \"roles\": [\n        \"user\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users - ADMIN JWT - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user9\",\n    \"name\": \"Some User\",\n    \"roles\": [\n        \"user\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "/products - NO JWT - Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('instance');",
									"    pm.expect(responseData).to.have.property('user');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('detail');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.be.a('Number').and.eq(401);",
									"});",
									"",
									"",
									"pm.test(\"User is anonymous\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.user).to.be.a('string').and.eq(\"anonymous\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products",
							"host": [
								"{{host}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "/products - USER JWT - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Id and name are present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(product) {",
									"    pm.expect(product).to.have.property('id').that.is.a('string');",
									"    pm.expect(product).to.have.property('name').that.is.a('string');",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products",
							"host": [
								"{{host}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "/products - USER JWT - Fail Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - title, instance, user, status, and detail\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('instance');",
									"    pm.expect(responseData).to.have.property('user');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('detail');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"User is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.user).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.be.a('Number').and.eq(403);",
									"});",
									"",
									"",
									"pm.test(\"User is mike\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.user).to.be.a('string').and.eq(\"mike\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"prod123\",\n    \"id\": \"a123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/products",
							"host": [
								"{{host}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "/products - ADMIN JWT - Fail, validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('detail');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('instance');",
									"    pm.expect(responseData).to.have.property('user');",
									"});",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"pm.test(\"User is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.user).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.be.a('Number').and.eq(400);",
									"});",
									"",
									"pm.test(\"User is john\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.user).to.be.a('string').and.eq(\"john\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"id\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/products",
							"host": [
								"{{host}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "/products - ADMIN JWT - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"p123\",\n    \"name\": \"Product 123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/products",
							"host": [
								"{{host}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "/products - ADMIN JWT - Fail, validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('detail');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('instance');",
									"    pm.expect(responseData).to.have.property('user');",
									"});",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"pm.test(\"User is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.user).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.be.a('Number').and.eq(400);",
									"});",
									"",
									"pm.test(\"User is john\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.user).to.be.a('string').and.eq(\"john\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/products/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/products - ADMIN JWT - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/products/p123a456",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"p123a456"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "user_admin",
			"value": "eyJhbGciOiJSUzI1NiJ9.eyJyb2xlcyI6WyJhZG1pbiJdLCJzdWIiOiJqb2huIiwiaWF0IjoxNzI4OTk0ODIwLCJleHAiOjE4ODY2NzQ4MjB9.jkIJxLFHzWQsUZe8SCS682JZP7-WJzA-KV4iCDRt62nqaJi3ufsz1EkRDDsZpNWZgAwr20u0SbFlMEhGLBiX7PMO7-VvdDRhXEklOc7b3hW1NuMbN28e408eFG7CtobCA6GBLfk4i9R7gvpGkJbbQ56sjcY7D1ZSwsvjOovxD38-6rYYa3wcWD-PCEge32rnxx-tZ-bA79ecLZ0NAjZPA0yx18g-WP8NLPNnydP37CDWHRo2ACp6qu1-jwbNLzSILvOKoMpXYiZMlSsUdEv-DWKJZ3oPu0TQ3bhan_KPVWj7DDigolt0_g-mwuBk1CCltwM332s_ixa1YzbledcV5A",
			"type": "string"
		},
		{
			"key": "user_user",
			"value": "eyJhbGciOiJSUzI1NiJ9.eyJyb2xlcyI6WyJ1c2VyIl0sInN1YiI6Im1pa2UiLCJpYXQiOjE3Mjg5OTQ4NDQsImV4cCI6MTg4NjY3NDg0NH0.QeYU4JvXbskBI5kteqrb-8YYRWU9W8raQMweHfqgmxvBF_jCnvHJljkjTW66l88v_tkmEo9sFdfbwaMFSArYgHSNS2N1g831Id2zklwr3IcXwui4zBkk5iF00pfLxA_0pNpPGzW5MV_H1QmR1-9lk3JizeurvkrInemAv0ai6bd4754KHHCoRMriTGBWNATqVqPreHQCdrbnt0i40dEBdM6ddDXO30qn_97VltbBLeQQ9Gy3J9-yIbe7rgW5fJD0uK6NT6kohWM8psBOGR07IZ3TZtJLWAWbPRgcBfPpFrpNqA56QdZyLW6h5ZOpjm3T41FV2bwhzQ8_AuoPi6HqXA",
			"type": "string"
		}
	]
}